{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"machine_shape":"hm","mount_file_id":"1RDOcdiDor0PerneRXtxB5lr352Ak-IG4","authorship_tag":"ABX9TyMMAB7cju5HUFMZl00PAWly"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","source":["import time\n","import cv2\n","import imutils\n","import platform\n","import numpy as np\n","from threading import Thread\n","from queue import Queue\n","\n","class Streamer :\n","    \n","    def __init__(self ):\n","        \n","        if cv2.ocl.haveOpenCL() :\n","            cv2.ocl.setUseOpenCL(True)\n","        print('[wandlab] ', 'OpenCL : ', cv2.ocl.haveOpenCL())\n","            \n","        self.capture = None\n","        self.thread = None\n","        self.width = 640\n","        self.height = 360\n","        self.stat = False\n","        self.current_time = time.time()\n","        self.preview_time = time.time()\n","        self.sec = 0\n","        self.Q = Queue(maxsize=128)\n","        self.started = False\n","        \n","    def run(self, src = 0 ) :\n","        \n","        self.stop()\n","    \n","        if platform.system() == 'Windows' :        \n","            self.capture = cv2.VideoCapture( src , cv2.CAP_DSHOW )\n","        \n","        else :\n","            self.capture = cv2.VideoCapture( src )\n","            \n","        self.capture.set(cv2.CAP_PROP_FRAME_WIDTH, self.width)\n","        self.capture.set(cv2.CAP_PROP_FRAME_HEIGHT, self.height)\n","        \n","        if self.thread is None :\n","            self.thread = Thread(target=self.update, args=())\n","            self.thread.daemon = False\n","            self.thread.start()\n","        \n","        self.started = True\n","    \n","    def stop(self):\n","        \n","        self.started = False\n","        \n","        if self.capture is not None :\n","            \n","            self.capture.release()\n","            self.clear()\n","            \n","    def update(self):\n","                    \n","        while True:\n","\n","            if self.started :\n","                (grabbed, frame) = self.capture.read()\n","                \n","                if grabbed : \n","                    self.Q.put(frame)\n","                          \n","    def clear(self):\n","        \n","        with self.Q.mutex:\n","            self.Q.queue.clear()\n","            \n","    def read(self):\n","\n","        return self.Q.get()\n","\n","    def blank(self):\n","        \n","        return np.ones(shape=[self.height, self.width, 3], dtype=np.uint8)\n","    \n","    def bytescode(self):\n","        \n","        if not self.capture.isOpened():\n","            \n","            frame = self.blank()\n","\n","        else :\n","            \n","            frame = imutils.resize(self.read(), width=int(self.width) )\n","        \n","            if self.stat :  \n","                cv2.rectangle( frame, (0,0), (120,30), (0,0,0), -1)\n","                fps = 'FPS : ' + str(self.fps())\n","                cv2.putText  ( frame, fps, (10,20), cv2.FONT_HERSHEY_PLAIN, 1, (0,0,255), 1, cv2.LINE_AA)\n","            \n","            \n","        return cv2.imencode('.jpg', frame )[1].tobytes()\n","    \n","    def fps(self):\n","        \n","        self.current_time = time.time()\n","        self.sec = self.current_time - self.preview_time\n","        self.preview_time = self.current_time\n","        \n","        if self.sec > 0 :\n","            fps = round(1/(self.sec),1)\n","            \n","        else :\n","            fps = 1\n","            \n","        return fps\n","                   \n","    def __exit__(self) :\n","        print( '* streamer class exit')\n","        self.capture.release()"],"metadata":{"id":"uPcXzw8d0tWd","executionInfo":{"status":"ok","timestamp":1663900562204,"user_tz":-540,"elapsed":889,"user":{"displayName":"신준호","userId":"03513964947086530035"}}},"execution_count":1,"outputs":[]}]}